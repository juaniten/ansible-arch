---
# -----------------------------
# Package management
# -----------------------------
- name: Manage packages on Arch
  hosts: localhost
  vars:
    packages_present:
      - git
      - stow
      - wget
      - yay
      - obsidian
      - tmux
      - firefox

    aur_packages_present:
      - hyprmon-bin

    packages_absent:
      - 1password
      - 1password-cli
      - 1password-beta
      - typora
      - obs-studio
      - signal-desktop

    unwanted_apps:
      - typora

  tasks:
    - name: Create the `aur_builder` user
      become: yes
      ansible.builtin.user:
        name: aur_builder
        create_home: yes
        group: wheel

    - name: Allow the `aur_builder` user to run `sudo pacman` without a password
      become: yes
      ansible.builtin.lineinfile:
        path: /etc/sudoers.d/11-install-aur_builder
        line: 'aur_builder ALL=(ALL) NOPASSWD: /usr/bin/pacman'
        create: yes
        mode: 0644
        validate: 'visudo -cf %s'

    - name: Ensure Ansible tmp directory exists for aur_builder
      become: yes
      ansible.builtin.file:
        path: /home/aur_builder/.ansible/tmp
        state: directory
        owner: aur_builder
        group: wheel
        mode: '0700'

    - name: Ensure desired packages are present
      community.general.pacman:
        name: "{{ packages_present }}"
        state: present
      become: true

    - name: Install AUR packages using yay
      kewlfft.aur.aur:
        use: yay
        name: "{{ aur_packages_present }}"
      become: yes
      become_user: aur_builder

    - name: Ensure unwanted packages are absent
      community.general.pacman:
        name: "{{ packages_absent }}"
        state: absent
      become: true

    - name: Remove unwanted app menu entries
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.local/share/applications/{{ item }}.desktop"
        state: absent
      loop: "{{ unwanted_apps }}"

# -----------------------------
# Dotfiles management
# -----------------------------
- name: Manage dotfiles
  hosts: localhost
  vars:
    dotfiles_repo: "git@github.com:juaniten/dotfiles.git"
    dotfiles_path: "{{ ansible_env.HOME }}/.dotfiles"
    tpm_repo: "git@github.com:tmux-plugins/tpm"
    tpm_path: "{{ ansible_env.HOME }}/.tmux/plugins/tpm"

  tasks:
    - name: Clone dotfiles repo
      ansible.builtin.git:
        repo: "{{ dotfiles_repo }}"
        dest: "{{ dotfiles_path }}"
        update: yes

    - name: Clone tmux plugin manager (tpm)
      ansible.builtin.git:
        repo: "{{ tpm_repo }}"
        dest: "{{ tpm_path }}"
        update: yes

    - name: Stow dotfiles
      shell: "stow --target {{ ansible_env.HOME }} --verbose=2 $(ls -d */)"
      args:
        chdir: "{{ dotfiles_path }}"
        executable: /bin/bash
      register: result
      changed_when: 'result.stderr is search("LINK: ")'

    - name: Reload Hyprland
      ansible.builtin.shell: hyprctl reload
      args:
        executable: /bin/bash

# -----------------------------
# Obsidian vault management
# -----------------------------
- name: Get Obsidian Vault
  hosts: localhost
  vars:
    obsidian_repo: "git@github.com:juaniten/obsidian-vault.git"
    obsidian_path: "{{ ansible_env.HOME }}/Documents/obsidian-vault"

  tasks:
    - name: Clone obsidian-vault repo
      ansible.builtin.git:
        repo: "{{ obsidian_repo }}"
        dest: "{{ obsidian_path }}"
        update: yes
